(read-hash-extend #\{ (lambda (chr port)
                        (let ((str "")
                              (pending 0)
                              (c (read-char port)))
                          (while (not (and (char=? c #\})
                                           (= pending 0)))
                            (if (char=? c #\{) (set! pending (1+ pending)))
                            (if (char=? c #\}) (set! pending (1- pending)))
                            (set! str (string-append str (string c)))
                            (set! c (read-char port)))
                          str)))

(read-hash-extend #\< (lambda (chr port)
                        (let ((subs '())
                              (c (read-char port)))
                          (while (not (char=? c #\>))
                            (unread-char c port)
                            (set! subs (append subs (list (read port))))
                            (set! c (read-char port)))
                          subs)))

;; just irgnore the pp-directives required by our skeleton generation script.
(read-hash-extend #\i (lambda (chr port)
					    (let ((rest (read port)))
						  (cond ((string=? rest "fndef")
						         (while (not (char=? #\newline (read-char port)))))
						        (else (unread-char #\i port)
								      (read port))))))
(read-hash-extend #\e (lambda (chr port)
					    (let ((rest (read port)))
						  (cond ((string=? rest "ndif")
						         (while (not (char=? #\newline (read-char port)))))
						        (else (unread-char #\i port)
								      (read port))))))
